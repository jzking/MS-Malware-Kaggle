
# coding: utf-8

# In[ ]:


import pandas as pd
import os
import numpy as np
import random
from sklearn.preprocessing import OneHotEncoder, LabelEncoder, StandardScaler
import pickle
from sklearn.impute import SimpleImputer
import gc

def train_prep(data_path = None, model_path = None, sample = True, size = .01, narrow = True, chunk = None, df_only = False, x_only = False):
    dtypes = {
        'MachineIdentifier':                                    'category',
        'ProductName':                                          'category',
        'EngineVersion':                                        'category',
        'AppVersion':                                           'category',
        'AvSigVersion':                                         'category',
        'IsBeta':                                               'int8',
        'RtpStateBitfield':                                     'float16',
        'IsSxsPassiveMode':                                     'int8',
        'DefaultBrowsersIdentifier':                            'float32',
        'AVProductStatesIdentifier':                            'float32',
        'AVProductsInstalled':                                  'float16',
        'AVProductsEnabled':                                    'float16',
        'HasTpm':                                               'int8',
        'CountryIdentifier':                                    'int16',
        'CityIdentifier':                                       'float32',
        'OrganizationIdentifier':                               'float16',
        'GeoNameIdentifier':                                    'float16',
        'LocaleEnglishNameIdentifier':                          'int16',
        'Platform':                                             'category',
        'Processor':                                            'category',
        'OsVer':                                                'category',
        'OsBuild':                                              'int16',
        'OsSuite':                                              'int16',
        'OsPlatformSubRelease':                                 'category',
        'OsBuildLab':                                           'category',
        'SkuEdition':                                           'category',
        'IsProtected':                                          'float16',
        'AutoSampleOptIn':                                      'int8',
        'PuaMode':                                              'category',
        'SMode':                                                'float16',
        'IeVerIdentifier':                                      'float16',
        'SmartScreen':                                          'category',
        'Firewall':                                             'float16',
        'UacLuaenable':                                         'float32',
        'UacLuaenable':                                         'float64', # was 'float32'
        'Census_MDC2FormFactor':                                'category',
        'Census_DeviceFamily':                                  'category',
        'Census_OEMNameIdentifier':                             'float32', # was 'float16'
        'Census_OEMModelIdentifier':                            'float32',
        'Census_ProcessorCoreCount':                            'float16',
        'Census_ProcessorManufacturerIdentifier':               'float16',
        'Census_ProcessorModelIdentifier':                      'float32', # was 'float16'
        'Census_ProcessorClass':                                'category',
        'Census_PrimaryDiskTotalCapacity':                      'float64', # was 'float32'
        'Census_PrimaryDiskTypeName':                           'category',
        'Census_SystemVolumeTotalCapacity':                     'float64', # was 'float32'
        'Census_HasOpticalDiskDrive':                           'int8',
        'Census_TotalPhysicalRAM':                              'float32',
        'Census_ChassisTypeName':                               'category',
        'Census_InternalPrimaryDiagonalDisplaySizeInInches':    'float32', # was 'float16'
        'Census_InternalPrimaryDisplayResolutionHorizontal':    'float32', # was 'float16'
        'Census_InternalPrimaryDisplayResolutionVertical':      'float32', # was 'float16'
        'Census_PowerPlatformRoleName':                         'category',
        'Census_InternalBatteryType':                           'category',
        'Census_InternalBatteryNumberOfCharges':                'float64', # was 'float32'
        'Census_OSVersion':                                     'category',
        'Census_OSArchitecture':                                'category',
        'Census_OSBranch':                                      'category',
        'Census_OSBuildNumber':                                 'int16',
        'Census_OSBuildRevision':                               'int32',
        'Census_OSEdition':                                     'category',
        'Census_OSSkuName':                                     'category',
        'Census_OSInstallTypeName':                             'category',
        'Census_OSInstallLanguageIdentifier':                   'float16',
        'Census_OSUILocaleIdentifier':                          'int16',
        'Census_OSWUAutoUpdateOptionsName':                     'category',
        'Census_IsPortableOperatingSystem':                     'int8',
        'Census_GenuineStateName':                              'category',
        'Census_ActivationChannel':                             'category',
        'Census_IsFlightingInternal':                           'float16',
        'Census_IsFlightsDisabled':                             'float16',
        'Census_FlightRing':                                    'category',
        'Census_ThresholdOptIn':                                'float16',
        'Census_FirmwareManufacturerIdentifier':                'float16',
        'Census_FirmwareVersionIdentifier':                     'float32',
        'Census_IsSecureBootEnabled':                           'int8',
        'Census_IsWIMBootEnabled':                              'float16',
        'Census_IsVirtualDevice':                               'float16',
        'Census_IsTouchEnabled':                                'int8',
        'Census_IsPenCapable':                                  'int8',
        'Census_IsAlwaysOnAlwaysConnectedCapable':              'float16',
        'Wdft_IsGamer':                                         'float16',
        'Wdft_RegionIdentifier':                                'float16',
        'HasDetections':                                        'int8'
        }
    exclude_cols = ['MachineIdentifier',
                   'HasDetections',
                   'RtpStateBitfield',
                   'IsSxsPassiveMode',
                   'AVProductsInstalled',
                   'AVProductsEnabled',
                   'IeVerIdentifier',
                   'Census_OEMNameIdentifier',
                   'Census_OEMModelIdentifier',
                   'Census_ProcessorManufacturerIdentifier',
                   'Census_ProcessorModelIdentifier ',
                   'Census_InternalBatteryType',
                   'Census_InternalBatteryNumberOfCharges',
                   'Census_OSInstallLanguageIdentifier',
                   'Census_OSUILocaleIdentifier',
                   'Census_IsFlightingInternal',
                   'Census_ThresholdOptIn',
                   'Census_FirmwareManufacturerIdentifier',
                   'Census_FirmwareVersionIdentifier',
                   'Census_IsWIMBootEnabled',
                   'Wdft_RegionIdentifier',
                   'Census_ProcessorClass',
                   'Census_ProcessorModelIdentifier']
    wide_cols = [#'AVProductStatesIdentifier',
                        'CityIdentifier'
                        ,'DefaultBrowsersIdentifier'
                        ,'GeoNameIdentifier'
                        ,'LocaleEnglishNameIdentifier'
                        ,'OsPlatformSubRelease'
                        ,'Census_OSBuildRevision'
                        ,'OsBuildLab'
                       ]
    if narrow:
        exclude_cols = exclude_cols + wide_cols
    #Define subset %
    if chunk is None:
        os.chdir(data_path)
        if sample:
            print('Using ' + str(size*100) + '% of data')
            p = size
        else:
            print('Using 100% of data')
        filename = 'train.csv'
        #Read in data based on subset %
        try:
            p
            raw_df = pd.read_csv(
                     filename, 
                     dtype=dtypes,
                     skiprows=lambda i: i>0 and random.random() > p)
        except:
            raw_df = pd.read_csv(
                     filename, 
                     dtype = dtypes)
    else:
        raw_df = chunk
    print('Finished reading CSV')
    #Define y variable
    y_df = raw_df['HasDetections'].astype(int)
    #Remove irrelevant cols
    raw_x_df = (raw_df.loc[:,raw_df.columns[~raw_df.columns.isin(exclude_cols)]])
    #Define numeric cols
    num_cols = (['Census_PrimaryDiskTotalCapacity',
             'Census_SystemVolumeTotalCapacity'
             ,'Census_TotalPhysicalRAM'
             ,'Census_InternalPrimaryDiagonalDisplaySizeInInches'
             ,'Census_InternalPrimaryDisplayResolutionHorizontal'
             ,'Census_InternalPrimaryDisplayResolutionVertical'
             #,'Census_ProcessorCoreCount'
                ])
    #Seperate categorical variables
    cat_df = raw_x_df.loc[:,raw_x_df.columns[~raw_x_df.columns.isin(num_cols)]]
    cat_df = cat_df.astype(np.object)
    #Seperate numerical variables
    num_df = raw_x_df.loc[:,num_cols]
    #Free up memory
    del raw_df, raw_x_df
    gc.collect()
    #Narrow down categorical columns if desired
    if narrow:
        cat_df['AvSigVersion'] = cat_df['AvSigVersion'].str[0:5]
    #Mark missing categorical vars
    for col in cat_df:
        cat_df[col][pd.isna(cat_df[col])] = 'MISSING'
    if df_only == False:
        #one-hot encoding
        if sample:
            cat_df = pd.get_dummies(cat_df, sparse = False)
        else:
            cat_df = pd.get_dummies(cat_df, sparse = True)
        dummies = cat_df.columns
        print('Finished One-Hot encoding')
    if chunk is None:
        #Scale num vars prior to imputation
        scalar = StandardScaler()
        scaled_num_df = pd.DataFrame(scalar.fit_transform(num_df))
        print('Finished scaling')
        #Impute missing num values as most frequent
        imp_freq = SimpleImputer(missing_values=np.nan, strategy='most_frequent')
        num_df = pd.DataFrame(imp_freq.fit_transform(scaled_num_df))
        num_df.index = scaled_num_df.index
        num_df.columns = num_cols
        print('Finished imputation')
        with open('used_cols', "wb") as f:
            pickle.dump(list(cat_df.columns)+num_cols, f)
        models = {'scalar':scalar,'imp_freq':imp_freq}
        if df_only == False:
            models['dummies'] = dummies
            del dummies
        os.chdir(model_path)
        with open('models', "wb") as f:
            pickle.dump(models, f)
        del scalar, scaled_num_df, imp_freq, models
        gc.collect()
    #Create df of x vars from adjusted set
    x_df = pd.concat([num_df, cat_df], axis = 1)
    gc.collect()
    if x_only:
        return x_df
    else:
        return x_df, y_df


def test_prep(data_path, model_path, narrow = True, df_only = False):
    dtypes = {
        'MachineIdentifier':                                    'category',
        'ProductName':                                          'category',
        'EngineVersion':                                        'category',
        'AppVersion':                                           'category',
        'AvSigVersion':                                         'category',
        'IsBeta':                                               'int8',
        'RtpStateBitfield':                                     'float16',
        'IsSxsPassiveMode':                                     'int8',
        'DefaultBrowsersIdentifier':                            'float32',
        'AVProductStatesIdentifier':                            'float32',
        'AVProductsInstalled':                                  'float16',
        'AVProductsEnabled':                                    'float16',
        'HasTpm':                                               'int8',
        'CountryIdentifier':                                    'int16',
        'CityIdentifier':                                       'float32',
        'OrganizationIdentifier':                               'float16',
        'GeoNameIdentifier':                                    'float16',
        'LocaleEnglishNameIdentifier':                          'int16',
        'Platform':                                             'category',
        'Processor':                                            'category',
        'OsVer':                                                'category',
        'OsBuild':                                              'int16',
        'OsSuite':                                              'int16',
        'OsPlatformSubRelease':                                 'category',
        'OsBuildLab':                                           'category',
        'SkuEdition':                                           'category',
        'IsProtected':                                          'float16',
        'AutoSampleOptIn':                                      'int8',
        'PuaMode':                                              'category',
        'SMode':                                                'float16',
        'IeVerIdentifier':                                      'float16',
        'SmartScreen':                                          'category',
        'Firewall':                                             'float16',
        'UacLuaenable':                                         'float32',
        'UacLuaenable':                                         'float64', # was 'float32'
        'Census_MDC2FormFactor':                                'category',
        'Census_DeviceFamily':                                  'category',
        'Census_OEMNameIdentifier':                             'float32', # was 'float16'
        'Census_OEMModelIdentifier':                            'float32',
        'Census_ProcessorCoreCount':                            'float16',
        'Census_ProcessorManufacturerIdentifier':               'float16',
        'Census_ProcessorModelIdentifier':                      'float32', # was 'float16'
        'Census_ProcessorClass':                                'category',
        'Census_PrimaryDiskTotalCapacity':                      'float64', # was 'float32'
        'Census_PrimaryDiskTypeName':                           'category',
        'Census_SystemVolumeTotalCapacity':                     'float64', # was 'float32'
        'Census_HasOpticalDiskDrive':                           'int8',
        'Census_TotalPhysicalRAM':                              'float32',
        'Census_ChassisTypeName':                               'category',
        'Census_InternalPrimaryDiagonalDisplaySizeInInches':    'float32', # was 'float16'
        'Census_InternalPrimaryDisplayResolutionHorizontal':    'float32', # was 'float16'
        'Census_InternalPrimaryDisplayResolutionVertical':      'float32', # was 'float16'
        'Census_PowerPlatformRoleName':                         'category',
        'Census_InternalBatteryType':                           'category',
        'Census_InternalBatteryNumberOfCharges':                'float64', # was 'float32'
        'Census_OSVersion':                                     'category',
        'Census_OSArchitecture':                                'category',
        'Census_OSBranch':                                      'category',
        'Census_OSBuildNumber':                                 'int16',
        'Census_OSBuildRevision':                               'int32',
        'Census_OSEdition':                                     'category',
        'Census_OSSkuName':                                     'category',
        'Census_OSInstallTypeName':                             'category',
        'Census_OSInstallLanguageIdentifier':                   'float16',
        'Census_OSUILocaleIdentifier':                          'int16',
        'Census_OSWUAutoUpdateOptionsName':                     'category',
        'Census_IsPortableOperatingSystem':                     'int8',
        'Census_GenuineStateName':                              'category',
        'Census_ActivationChannel':                             'category',
        'Census_IsFlightingInternal':                           'float16',
        'Census_IsFlightsDisabled':                             'float16',
        'Census_FlightRing':                                    'category',
        'Census_ThresholdOptIn':                                'float16',
        'Census_FirmwareManufacturerIdentifier':                'float16',
        'Census_FirmwareVersionIdentifier':                     'float32',
        'Census_IsSecureBootEnabled':                           'int8',
        'Census_IsWIMBootEnabled':                              'float16',
        'Census_IsVirtualDevice':                               'float16',
        'Census_IsTouchEnabled':                                'int8',
        'Census_IsPenCapable':                                  'int8',
        'Census_IsAlwaysOnAlwaysConnectedCapable':              'float16',
        'Wdft_IsGamer':                                         'float16',
        'Wdft_RegionIdentifier':                                'float16',
        'HasDetections':                                        'int8'
        }
    exclude_cols = ['MachineIdentifier',
                   'HasDetections',
                   'RtpStateBitfield',
                   'IsSxsPassiveMode',
                   'AVProductsInstalled',
                   'AVProductsEnabled',
                   'IeVerIdentifier',
                   'Census_OEMNameIdentifier',
                   'Census_OEMModelIdentifier',
                   'Census_ProcessorManufacturerIdentifier',
                   'Census_ProcessorModelIdentifier ',
                   'Census_InternalBatteryType',
                   'Census_InternalBatteryNumberOfCharges',
                   'Census_OSInstallLanguageIdentifier',
                   'Census_OSUILocaleIdentifier',
                   'Census_IsFlightingInternal',
                   'Census_ThresholdOptIn',
                   'Census_FirmwareManufacturerIdentifier',
                   'Census_FirmwareVersionIdentifier',
                   'Census_IsWIMBootEnabled',
                   'Wdft_RegionIdentifier',
                   'Census_ProcessorClass',
                   'Census_ProcessorModelIdentifier']
    wide_cols = [#'AVProductStatesIdentifier',
                        'CityIdentifier'
                        ,'DefaultBrowsersIdentifier'
                        ,'GeoNameIdentifier'
                        ,'LocaleEnglishNameIdentifier'
                        ,'OsPlatformSubRelease'
                        ,'Census_OSBuildRevision'
                        ,'OsBuildLab'
                       ]
    if narrow:
        exclude_cols = exclude_cols + wide_cols
    print('Starting CSV read...')
    raw_df = pd.read_csv(
               data_path + 'test.csv', 
               dtype = dtypes)
    print('Finished reading CSV')
    #Remove irrelevant cols
    raw_x_df = (raw_df.loc[:,raw_df.columns[~raw_df.columns.isin(exclude_cols)]])
    #Define numeric cols
    num_cols = (['Census_PrimaryDiskTotalCapacity',
             'Census_SystemVolumeTotalCapacity'
             ,'Census_TotalPhysicalRAM'
             ,'Census_InternalPrimaryDiagonalDisplaySizeInInches'
             ,'Census_InternalPrimaryDisplayResolutionHorizontal'
             ,'Census_InternalPrimaryDisplayResolutionVertical'
             #,'Census_ProcessorCoreCount'
                ])
    #Seperate categorical variables
    cat_df = raw_x_df.loc[:,raw_x_df.columns[~raw_x_df.columns.isin(num_cols)]]
    cat_df = cat_df.astype(np.object)
    #Seperate numerical variables
    num_df = raw_x_df.loc[:,num_cols]
    #Free up memory
    del raw_df, raw_x_df
    gc.collect()
    #Narrow down categorical columns if desired
    if narrow:
        cat_df['AvSigVersion'] = cat_df['AvSigVersion'].str[0:5]
    #Mark missing categorical vars
    for col in cat_df:
        cat_df[col][pd.isna(cat_df[col])] = 'MISSING'
    #One hot encoding
    if df_only == False:
        cat_df = pd.get_dummies(cat_df, sparse = True)
        print('Finished One-Hot encoding')
    #Scale num vars prior to imputation
    with open(model_path + 'models', "rb") as f:
        models = pickle.load(f)
    scalar = models['scalar']
    scaled_num_df = pd.DataFrame(scalar.transform(num_df))
    print('Finished scaling')
    #Impute missing num values as most frequent
    imp_freq = models['imp_freq']
    num_df = pd.DataFrame(imp_freq.transform(scaled_num_df))
    num_df.index = scaled_num_df.index
    num_df.columns = num_cols
    print('Finished imputation')    
    #Free up memory
    del scalar, scaled_num_df, imp_freq, models
    gc.collect()
    #Create df of x vars from adjusted set
    x_df = pd.concat([num_df, cat_df], axis = 1)
    gc.collect()
    return x_df

