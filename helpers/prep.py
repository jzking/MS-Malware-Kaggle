
# coding: utf-8

# In[ ]:


import pandas as pd
import os
import numpy as np
import random
from sklearn.preprocessing import OneHotEncoder, LabelEncoder, StandardScaler
import pickle
from sklearn.impute import SimpleImputer
import gc



# In[ ]:


def train_prep(file_path = None, sample = True, size = .01, narrow = True, chunk = None):
    #Define subset %
    if len(chunk) == 0:
        os.chdir(file_path + '\\data')
        if sample:
            print('Using ' + str(size*100) + '% of data')
            p = size
        else:
            print('Using 100% of data')
        filename = 'train.csv'
        #Read in data based on subset %
        try:
            p
            raw_df = pd.read_csv(
                     filename, 
                     dtype = {'PuaMode':object},
                     skiprows=lambda i: i>0 and random.random() > p)
        except:
            raw_df = pd.read_csv(
                     filename, 
                     dtype = {'PuaMode':object})
    else:
        raw_df = chunk
    print('Finished reading CSV')
    #Define y variable
    y_df = raw_df['HasDetections'].astype(int)
    #Remove irrelevant cols
    raw_x_df = (raw_df.loc[:,raw_df.columns[~raw_df.columns.isin(['MachineIdentifier',
                                                          'HasDetections',
                                                          'RtpStateBitfield',
                                                          'IsSxsPassiveMode',
                                                          'AVProductsInstalled',
                                                          'AVProductsEnabled',
                                                          'IeVerIdentifier',
                                                          'Census_OEMNameIdentifier',
                                                          'Census_OEMModelIdentifier',
                                                          'Census_ProcessorManufacturerIdentifier',
                                                          'Census_ProcessorModelIdentifier ',
                                                          'Census_InternalBatteryType',
                                                          'Census_InternalBatteryNumberOfCharges',
                                                          'Census_OSInstallLanguageIdentifier',
                                                          'Census_OSUILocaleIdentifier',
                                                          'Census_IsFlightingInternal',
                                                          'Census_ThresholdOptIn',
                                                          'Census_FirmwareManufacturerIdentifier',
                                                          'Census_FirmwareVersionIdentifier',
                                                          'Census_IsWIMBootEnabled',
                                                          'Wdft_RegionIdentifier',
                                                          'Census_ProcessorClass',
                                                          'Census_ProcessorModelIdentifier'])]])
    #Define numeric cols
    num_cols = (['Census_PrimaryDiskTotalCapacity',
             'Census_SystemVolumeTotalCapacity',
             'Census_TotalPhysicalRAM',
             'Census_InternalPrimaryDiagonalDisplaySizeInInches',
             'Census_InternalPrimaryDisplayResolutionHorizontal',
             'Census_InternalPrimaryDisplayResolutionVertical',
             'Census_ProcessorCoreCount'])
    #Seperate categorical variables
    cat_df = raw_x_df.loc[:,raw_x_df.columns[~raw_x_df.columns.isin(num_cols)]]
    cat_df = cat_df.astype(np.object)
    #Seperate numerical variables
    num_df = raw_x_df.loc[:,num_cols]
    #Free up memory
    del raw_df, raw_x_df
    gc.collect()
    #Narrow down categorical columns if desired
    if narrow:
        cat_df['AvSigVersion'] = cat_df['AvSigVersion'].str[0:5]
        exclude_cols = [#'AVProductStatesIdentifier',
                        'CityIdentifier'
                        ,'DefaultBrowsersIdentifier'
                        ,'GeoNameIdentifier'
                        ,'LocaleEnglishNameIdentifier'
                        ,'OsPlatformSubRelease'
                        ,'Census_OSBuildRevision'
                        ,'OsBuildLab'
                       ]
        cat_df = cat_df.loc[:,cat_df.columns[~cat_df.columns.isin(exclude_cols)]]
    #Mark missing categorical vars
    for col in cat_df:
        cat_df[col][pd.isna(cat_df[col])] = 'MISSING'
    #one-hot encoding
    cat_df = pd.get_dummies(cat_df)
    dummies = cat_df.columns
    print('Finished One-Hot encoding')
    if len(chunk) == 0:
        #Scale num vars prior to imputation
        scalar = StandardScaler()
        scaled_num_df = pd.DataFrame(scalar.fit_transform(num_df))
        print('Finished scaling')
        #Impute missing num values as most frequent
        imp_freq = SimpleImputer(missing_values=np.nan, strategy='most_frequent')
        num_df = pd.DataFrame(imp_freq.fit_transform(scaled_num_df))
        num_df.index = scaled_num_df.index
        num_df.columns = num_cols
        print('Finished imputation')
        models = {'scalar':scalar,'imp_freq':num_df,'dummies':dummies}
        os.chdir(file_path + '\\MS-Malware-Kaggle')
        with open('models\\models', "wb") as f:
            pickle.dump(models, f)
        with open('c:\\Users\\zking\\Documents\\Kaggle\\MS Malware\\data\\used_cols', "wb") as f:
            pickle.dump(list(cat_df.columns)+num_cols, f)
    #Create df of x vars from adjusted set
    x_df = pd.concat([num_df, cat_df], axis = 1)
    return x_df, y_df


def test_prep(file_path, narrow = False):
    os.chdir(file_path + '\\data')
    filename = 'test.csv'
    #Read in data based on subset %
    raw_df = pd.read_csv(filename, dtype = {'PuaMode':object})
    print('Finished reading CSV')
    #Remove irrelevant cols
    raw_x_df = (raw_df.loc[:,raw_df.columns[~raw_df.columns.isin(['MachineIdentifier',
                                                                  'HasDetections',
                                                                  'RtpStateBitfield',
                                                                  'IsSxsPassiveMode',
                                                                  'AVProductsInstalled',
                                                                  'AVProductsEnabled',
                                                                  'IeVerIdentifier',
                                                                  'Census_OEMNameIdentifier',
                                                                  'Census_OEMModelIdentifier',
                                                                  'Census_ProcessorManufacturerIdentifier',
                                                                  'Census_ProcessorModelIdentifier ',
                                                                  'Census_InternalBatteryType',
                                                                  'Census_InternalBatteryNumberOfCharges',
                                                                  'Census_OSInstallLanguageIdentifier',
                                                                  'Census_OSUILocaleIdentifier',
                                                                  'Census_IsFlightingInternal',
                                                                  'Census_ThresholdOptIn',
                                                                  'Census_FirmwareManufacturerIdentifier',
                                                                  'Census_FirmwareVersionIdentifier',
                                                                  'Census_IsWIMBootEnabled',
                                                                  'Wdft_RegionIdentifier',
                                                                  'Census_ProcessorClass',
                                                                  'Census_ProcessorModelIdentifier'])]])
    #Define numeric cols
    num_cols = (['Census_PrimaryDiskTotalCapacity',
             'Census_SystemVolumeTotalCapacity',
             'Census_TotalPhysicalRAM',
             'Census_InternalPrimaryDiagonalDisplaySizeInInches',
             'Census_InternalPrimaryDisplayResolutionHorizontal',
             'Census_InternalPrimaryDisplayResolutionVertical',
             'Census_ProcessorCoreCount'])
    #Seperate categorical variables
    cat_df = raw_x_df.loc[:,raw_x_df.columns[~raw_x_df.columns.isin(num_cols)]]
    cat_df = cat_df.astype(np.object)
    #Seperate numerical variables
    num_df = raw_x_df.loc[:,num_cols]
    #Narrow down categorical columns if desired
    if narrow:
        cat_df['AvSigVersion'] = cat_df['AvSigVersion'].str[0:5]
        exclude_cols = ['AVProductStatesIdentifier',
                        'CityIdentifier',
                        'DefaultBrowsersIdentifier',
                        'GeoNameIdentifier',
                        'LocaleEnglishNameIdentifier',
                        'OsPlatformSubRelease',
                        'Census_OSBuildRevision',
                        'OsBuildLab']
        cat_df = cat_df.loc[:,cat_df.columns[~cat_df.columns.isin(exclude_cols)]]
    #Mark missing categorical vars
    for col in cat_df:
        cat_df[col][pd.isna(cat_df[col])] = 'MISSING'
    #Read in models to continue prep
    os.chdir(file_path + '\\MS-Malware-Kaggle')
    with open('models\\models', "rb") as f:
        models = pickle.load(f)
    #Scale num vars prior to imputation
    scalar = models['scalar']
    scaled_num_df = pd.DataFrame(scalar.transform(num_df))
    print('Finished scaling')
    #Impute missing num values as most frequent
    imp_freq = models['imp_freq']
    imp_num_df = pd.DataFrame(imp_freq.transform(scaled_num_df))
    imp_num_df.index = scaled_num_df.index
    imp_num_df.columns = scaled_num_df.columns
    print('Finished imputation')
    #Convert categories into nominal integers
    le_dict = models['le_dict']
    label_df = pd.DataFrame()
    for col in cat_df:
        le = le_dict[col]
        label_df[col] = le.transform(cat_df[col].astype(str))
    print('Finished label encoding')
    #Create df of binary cols representing instance of each category across multipile columns
    enc = models['enc']
    onehot_df = pd.DataFrame(enc.ransform(label_df).toarray())
    print('Finished One-Hot encoding')
    #Free up memory
    del raw_df, raw_x_df, cat_df, num_df, scaled_num_df
    gc.collect()
    #Create df of x vars from adjusted set
    x_df = pd.concat([imp_num_df, onehot_df], axis = 1)
    return x_df
