
# coding: utf-8

# In[1]:


import os
import sys
import pandas as pd
import numpy as np
import random
import pickle
import sklearn
from keras.models import Sequential, load_model
from keras.layers import Dense
from keras.layers import Dropout
from keras.wrappers.scikit_learn import KerasClassifier
from keras.constraints import maxnorm
from twilio_functions import send_sms
from prep import train_prep, test_prep
from keras.utils.training_utils import multi_gpu_model
import csv
sys.path.insert(0, 'helpers')
from config import *


# In[9]:


log = open("deploy.log", "a")
sys.stdout = log


# In[ ]:


x_df, y_df = train_prep(sample = sample, narrow = narrow)


# #  Neural Network

# In[7]:


# Function to create model, required for KerasClassifier
def create_model(optimizer='Adagrad',
                 init_mode='he_normal',
                 activation = 'softsign',
                 dropout_rate=0.9,
                 weight_constraint=5,
                 neurons = 1500):
    # create model
    clf = Sequential()
    clf.add(Dense(neurons,
                  kernel_initializer=init_mode,
                  input_dim=len(x_df.columns),
                  activation=activation,
                  kernel_constraint=maxnorm(weight_constraint)))
    clf.add(Dropout(dropout_rate))
    clf.add(Dense(1,
                  activation='sigmoid'))
    parallel_model = multi_gpu_model(clf, gpus=gpus)
    # Compile model
    parallel_model.compile(loss='binary_crossentropy', optimizer=optimizer, metrics=['accuracy'])
    return parallel_model


# In[8]:


clf = KerasClassifier(build_fn=create_model,
                      epochs=100,
                      batch_size=150,
                      verbose=0)


# In[ ]:


try:
    # fix random seed for reproducibility
    seed = 7
    np.random.seed(seed)
    print('Starting to train...')
    clf.fit(x_df.values,
            y_df.values)
    # summarize results
    body = "Finished training."
    sms = send_sms(body)
    print(sms)  
except:
    body = "Training failed"
    sms = send_sms(body)
    print(sms)


# In[ ]:


print('Starting model save...')
clf.model.save('clf.h5')


# In[1]:


x_test = test_prep(narrow = True)


# In[ ]:


clf_probs = clf.predict_proba(x_test)


# In[ ]:


with open('clf_probs.csv', 'w') as csvFile:
    writer = csv.writer(csvFile)
    writer.writerows(clf_probs)
csvFile.close()
body = 'Predictions should be written to clf_probs.csv'
sms = send_sms(body)
print(sms)  

